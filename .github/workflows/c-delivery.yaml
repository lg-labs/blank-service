name: Continuous Delivery

on:
  workflow_run:
    workflows: [ "Continuous Integration" ]
    types:
      - completed
permissions:
  contents: write
  packages: write
env:
  MAVEN_DIR: ./

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}
          name: docker-image
          path: .

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - run: ls -la
      - name: Check if pom.xml exists
        run: |
          if [ ! -f "${{ env.MAVEN_DIR }}/pom.xml" ]; then
            echo "Error: pom.xml not found in the specified directory: ${{ env.MAVEN_DIR }}"
            exit 1
          fi

      - name: Extract Maven coordinates from pom.xml
        id: extract_maven_coordinates
        run: |
          if ! command -v xmllint &> /dev/null; then
            echo "xmllint could not be found, exiting..."
            exit 1
          fi
          GROUP_ID=$(xmllint --xpath 'string(//*[local-name()="project"]/*[local-name()="groupId"])' ${{ env.MAVEN_DIR }}/pom.xml)
          ARTIFACT_ID=$(xmllint --xpath 'string(//*[local-name()="project"]/*[local-name()="artifactId"])' ${{ env.MAVEN_DIR }}/pom.xml)
          VERSION=$(xmllint --xpath 'string(//*[local-name()="project"]/*[local-name()="version"])' ${{ env.MAVEN_DIR }}/pom.xml)
          
          GROUP_ID_WITH_SLASH=$(echo "$GROUP_ID" | tr '.' '/')
          
          echo "Extracted GROUP_ID: $GROUP_ID"
          echo "Extracted ARTIFACT_ID: $ARTIFACT_ID"
          echo "Extracted VERSION: $VERSION"
          echo "Extracted GROUP_ID_WITH_SLASH: $GROUP_ID_WITH_SLASH"
          
          if [[ -z "$GROUP_ID" || -z "$ARTIFACT_ID" || -z "$VERSION" ]]; then
            echo "Error: One or more Maven coordinates (GROUP_ID, ARTIFACT_ID, VERSION) could not be extracted."
            exit 1
          fi

          echo "group_id=${GROUP_ID}" >> $GITHUB_ENV
          echo "artifact_id=${ARTIFACT_ID}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "image_name=${GROUP_ID}/${ARTIFACT_ID}:${VERSION}" >> $GITHUB_ENV
          echo "group_id_with_slash=${GROUP_ID_WITH_SLASH}" >> $GITHUB_ENV

      - name: Load Docker image locally
        run: docker load -i blank-service-image.tar

      - name: Check if Docker image exists locally
        id: check_local_image
        run: |
          if [[ "$(docker images -q ${{ env.image_name }})" == "" ]]; then
            echo "Error: Local Docker image '${{ env.image_name }}' not found."
            exit 1  # Salir con un cÃ³digo de error
          fi
          echo "Local Docker image '${{ env.image_name }}' exists."

      - name: Log in to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo $GITHUB_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Check if Docker image exists in GitHub Packages
        id: check_image
        run: |
          IMAGE="ghcr.io/${{ github.repository }}/${{ env.group_id }}/${{ env.artifact_id }}:${{ env.version }}"

          # Check if the Docker image exists in GitHub Packages
          if docker pull "$IMAGE"; then
            echo "Image exists, will delete it."
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist."
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi
          echo "image_gh_package=${IMAGE}" >> $GITHUB_ENV

      - name: Get Docker image version ID locally
        id: get_local_image_id
        run: |
          IMAGE_ID=$(docker images ${{ env.image_gh_package }} --format "{{.ID}}")
          
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Docker image ID not found."
            exit 1
          fi
          echo "Found Docker image ID: $IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Delete Docker image from GitHub Packages
        if: steps.check_image.outputs.image_exists == 'true'
        run: |
          IMAGE_NAME="${{ env.group_id }}/${{ env.artifact_id }}"
          DELETE_URL="https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${IMAGE_NAME}/versions/${{ env.version_id }}"
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$DELETE_URL"

      - name: Tag Docker image for GitHub Packages
        run: |
          docker tag ${{ env.image_name }} ghcr.io/${{ github.repository }}/${{ env.image_name }}

      - name: Push Docker Image to GitHub Packages
        run: |
          docker push ghcr.io/${{ github.repository }}/${{ env.image_name }}