name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

#      - name: Set up Docker cache
#        uses: actions/cache@v4
#        with:
#          path: /var/lib/docker
#          key: ${{ runner.os }}-docker-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-docker-

      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Configure Maven settings.xml
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.PKG_GITHUB_TOKEN }}
        run: |
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                    http://maven.apache.org/xsd/settings-1.0.0.xsd">
              <servers>
                  <server>
                      <id>github</id>
                      <username>${GITHUB_USERNAME}</username>
                      <password>${GITHUB_TOKEN}</password>
                  </server>
              </servers>
              <profiles>
                  <profile>
                      <id>github</id>
                      <repositories>
                          <repository>
                              <id>github</id>
                              <url>https://maven.pkg.github.com/lg-labs-pentagon/*</url>
                              <snapshots>
                                <enabled>true</enabled>
                              </snapshots>
                          </repository>
                      </repositories>
                  </profile>
              </profiles>
              <activeProfiles>
                  <activeProfile>github</activeProfile>
              </activeProfiles>
          </settings>
          EOF
#      - name: Cache SonarQube packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and run tests using Makefile
        run: make install

      - name: Check if PNG exists
        run: |
          if [ ! -f ./target/dependency-graph.png ]; then
            echo "File not found!"
            exit 1
          fi
#      - name: Cache generated PNG
#        uses: actions/cache@v4.0.2
#        with:
#          path: ./target/dependency-graph.png
#          key: ${{ runner.os }}-png-cache-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-png-cache-
      - name: List files in target directory
        run: ls -al ./target
      - name: Upload dependency-graph.png as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph
          path: ./target/dependency-graph.png

      - name: Archive test reports
        #if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./blank-support/target/site/jacoco-aggregate-all

      - name: Upload Cucumber Report
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-report
          path: ./blank-acceptance-test/target/atdd-reports/cucumber-reports.html

#      - name: Move PNG to destination folder
#        run: cp ./target/dependency-graph.png ./blank-support/app/docs/img/
