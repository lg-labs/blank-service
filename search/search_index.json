{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#blank-service-with-hex-arch-ddd-saga-outboxkafka","title":"\ud83d\udee0\ufe0f Blank \u03bc-service with Hex Arch, DDD, SAGA, Outbox&amp;Kafka","text":"<p>For full code, visit this Repository.</p> <p> \u26a0\ufe0f Replace [blank] word with your Domain Name \u26a0\ufe0f </p>"},{"location":"#using-lg5-spring-100-alpha-jdk-21","title":"Using Lg5 Spring <code>1.0.0-alpha</code>, JDK 21","text":"<p>More details</p>"},{"location":"#build-project","title":"\ud83d\ude80 Build project","text":"<p>Install 1/1: Setup JDK 21.</p> <pre><code>sdk use java 21.0.2-amzn \n</code></pre> <p>Install \u00bd: Install the dependencies in your project.</p> <pre><code>mvn clean install \n</code></pre>"},{"location":"#deploy-with-k8s","title":"\ud83d\ude80 Deploy with K8s","text":"<p>Use the infra repository blank-infra to deploy with K8s</p>"},{"location":"#contents","title":"\ud83d\udcdaContents","text":"<ul> <li>blank-acceptance-test</li> <li>blank-api</li> <li>blank-container</li> <li>blank-data-access</li> <li>blank-domain<ul> <li>blank-domain-core</li> <li>blank-application-service</li> </ul> </li> <li>blank-external</li> <li>blank-message<ul> <li>blank-message-core</li> <li>blank-message-model</li> </ul> </li> </ul>"},{"location":"#run-locally","title":"\ud83d\ude80 Run locally","text":""},{"location":"#you-can","title":"You can ...","text":"<p>Using <code>makefile</code></p>"},{"location":"#start-with-infrastructure","title":"Start with infrastructure","text":"<p>\ud83d\ude00 To start the Kafka Cluster and Postgres.</p> <pre><code>make docker-up\n</code></pre> <p>\u26d4\ufe0f To the Kafka Cluster and Postgres stop or destroy: <pre><code>make docker-down\n</code></pre></p>"},{"location":"#run-app","title":"Run APP","text":"<p>\ud83d\ude00 To start the blank Service.</p> <pre><code>make run-app\n</code></pre>"},{"location":"#blank-api-100-alpha","title":"blank API <code>1.0.0-alpha</code>","text":"<p>\ud83d\udc4b  blank API, Port:8181</p> <p>Username: <code>None</code> Password: <code>None</code></p>"},{"location":"#database-ui","title":"Database UI","text":"<p>\ud83d\udc4b  PgAdmin, Port:5013</p> <p>Username: <code>blanksystem@db.com</code> Password: <code>blanksystem-db</code></p>"},{"location":"#kafka-ui","title":"Kafka UI","text":"<p>\ud83d\udc4b  Kafka UI, Port:9080</p> <p>Username: <code>None</code> Password: <code>None</code> </p>"},{"location":"#contracts","title":"Contracts","text":"<ol> <li>Open API</li> <li>Async API</li> </ol>"},{"location":"#avro-models-from-avro-model-definition","title":"AVRO MODELS from Avro Model definition","text":"<p>If you add a new Avro model, REMEMBER execute avro model again. <pre><code>make run-avro-model\n</code></pre></p>"},{"location":"#logger-elk","title":"Logger &amp; ELK","text":"<p>This project is prepared to send log files and process visualization with filebeat. You can specify the directory for stored the *.log files. Now, genera two file logs.</p> <p>Simple log * [log.path]/[application_name]-simple.log</p> <p>Complex log * [log.path]/[application_name]-complex.log</p> <ul> <li>Specify the directory with <code>log.path</code> property.</li> </ul> <p>Simple: <code>Simple details about application logs.</code> Complex:  <code>More details about application logs.</code></p>"},{"location":"#testing-project","title":"\ud83e\uddea Testing Project","text":"<p>\u2705 Checkstyle \u00bc: configuration that checks the Google coding conventions from Google Java Style.</p> <pre><code>make run-checkstyle \n</code></pre> <p>\ud83e\uddea Running Unit Test 2/4: Using JUnit 5.</p> <pre><code>make run-unit-test \n</code></pre> <p>\ud83c\udf3e Running Integration Test \u00be: Using Test Containers, JUnit 5 and Rest-Assured.</p> <pre><code>make run-integration-test \n</code></pre> <p>\ud83e\udd52Running Acceptance Test 4/4: Using Cucumber, Test Containers, JUnit 5 and Rest-Assured.</p> <pre><code>make run-acceptance-test\n</code></pre>"},{"location":"#interaction-with-tests-one-to-one","title":"Interaction with tests one-to-one","text":"<p>\ud83e\uddea Run a Unit Test <pre><code>make run-ut-spec TEST_NAME=BlankMessageListenerImplTest\n</code></pre> Details: <code>make run-ut-spec TEST_NAME=[TestNameTest]</code></p> <p>\ud83c\udf3eRun an Integration Test <pre><code>make run-it-spec TEST_NAME=OtherRepositoryIT\n</code></pre> Details: <code>make run-it-spec TEST_NAME=[TestNameTest|TestNameIT]</code></p> <p>\ud83e\udd52 Run an Acceptance Test <pre><code>make run-at-spec TEST_NAME=StartAcceptanceT\n</code></pre> Details: <code>make run-at-spec TEST_NAME=[TestNameAcceptanceT]</code></p> <p>\u26a0\ufe0f Any Test: Be careful, this option is slower. <pre><code>make run-test-spec TEST_NAME=BlankMessageListenerImplTest\n</code></pre> Details: <code>make run-test-spec TEST_NAME=[TestNameTest|TestNameIT|TestNameAcceptanceT]</code> </p>"},{"location":"#acceptance-test-report","title":"\ud83e\udd52 Acceptance Test Report","text":"<p>You can show the Acceptance Test Report Online.</p>"},{"location":"#license","title":"\u2696\ufe0f License","text":"<p>The MIT License (MIT). Please see License for more information.</p>"},{"location":"api-module/","title":"API Module","text":"<p>Implement input port from a primary adapter. For instance, Spring Rest Controller.</p> <p>Example: a spec with OpenAPI</p>"},{"location":"api-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n        &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--lg5 dependencies--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-api-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"api-module/#global-error-handler","title":"Global Error Handler","text":"<p>To Api REST, you need to add the following class with a global configuration to http errors. <pre><code>import com.blanksystem.blank.service.domain.exception.BlankDomainException;\nimport com.blanksystem.blank.service.domain.exception.BlankNotFoundException;\nimport com.lg5.spring.api.rest.ErrorDTO;\nimport com.lg5.spring.api.rest.GlobalExceptionHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n/**\n * &lt;h1&gt;Caught the Blank Domain Layer errors&lt;/h1&gt;\n */\n@Slf4j\n@ControllerAdvice\npublic class BlankGlobalExceptionHandler extends GlobalExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(value = {BlankDomainException.class})\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public ErrorDTO handleException(BlankDomainException orderDomainException) {\n        log.error(orderDomainException.getMessage(), orderDomainException);\n        return new ErrorDTO(HttpStatus.BAD_REQUEST.getReasonPhrase(), orderDomainException.getMessage());\n    }\n\n    @ResponseBody\n    @ExceptionHandler(value = {BlankNotFoundException.class})\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    public ErrorDTO handleException(BlankNotFoundException orderNotFoundException) {\n        log.error(orderNotFoundException.getMessage(), orderNotFoundException);\n        return new ErrorDTO(HttpStatus.NOT_FOUND.getReasonPhrase(), orderNotFoundException.getMessage());\n    }\n}\n</code></pre></p>"},{"location":"api-module/#add-openapi-file","title":"Add OpenAPI file","text":"<p>You must define an api before that written or autogenerate the controllers:    Create <code>src/main/resources/spec/openapi.yaml</code> as recommendation.</p>"},{"location":"api-module/#service-healthy","title":"Service Healthy","text":"<p>By default, has a health endpoint as GET method to <code>localhost:PORT/health</code>.    And, expected the response status with <code>200 OK</code></p>"},{"location":"api-module/#project-structure","title":"Project structure","text":"<p><pre><code>...\n\u2514\u2500\u2500 com.blanksystem.blank.service.api\n   \u251c\u2500\u2500 exception/\n   \u2502  \u2514\u2500\u2500 handler/\n   \u2502     \u2514\u2500\u2500 BlankGlobalExceptionHandler.java\n   \u2514\u2500\u2500 rest/\n      \u2514\u2500\u2500 BlankController.java\n...\n\u2514\u2500\u2500 resources/\n    \u2514\u2500\u2500 spec/\n       \u2514\u2500\u2500 openapi.yaml\n</code></pre> Remember, you must add the Open Api definition into <code>resourses/spec/openapi.yaml</code></p> <p>Read more about openapi guidelines </p>"},{"location":"api-module/#2do","title":"2'DO","text":""},{"location":"api-module/#extend-support-to","title":"Extend support to:","text":"<ul> <li>GraphQL</li> <li>gRCP</li> <li>Command Line Interactive or others.</li> </ul>"},{"location":"atdd-module/","title":"\ud83e\uddeaAcceptance Test(ATDD) Module","text":"<p>Good news for you \ud83c\udf89</p> <p>Finally, Lg5 supports Cucumber integration with Spring Boot 3, Testcontainers, and reuses many configurations for testing. This way, you can create acceptance tests for your domain services quickly.</p> <p>lg5-spring-acceptance-test</p> <p>Example an Acceptance Test Report with Cucumber</p>"},{"location":"atdd-module/#principal-dependencies","title":"Principal Dependencies","text":"acceptance-test-module(pom.xml)<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Use <code>lg5-spring-starter</code> to get a Spring context and have dependency injection in the test creation process.</p>"},{"location":"atdd-module/#domain-service-image","title":"Domain Service Image","text":"<p>\ufe0fWarning</p> <p>Before continuing, you will need to have the docker image of your app. If not, remember to add the <code>jib plugin</code> in the container module or generate the docker image in another way. Once you have the docker image, you can continue.</p>"},{"location":"atdd-module/#acceptance-test-drive-development","title":"Acceptance Test Drive Development","text":"<pre><code>Feature:\n    I as a customer want to create a blank using the repository template\n\nScenario: the blank should be CREATED when use the repository template\n    Given a repository template\n    When blank is created\n    Then the blank will be created using the repository template\n</code></pre> <p>Recommended following Acceptance Test Drive Development allowed to align main goals for one or more user's needs.   </p> <p>Using the traditional workflow ATDD, you need to define acceptance criteria using Gherkin syntax (Given, When, Then).</p> <p>You need to add the following Dependency and Java classes to your acceptance test. So, you can try the dockerized domain service. For more details, read more about Hexagonal Architecture(Spanish).</p> <p>Dependencies:</p> <p>Lg5 tries to simplify dependencies but the power is the same. \ud83d\udc4c</p> <p>acceptance-test-module(pom.xml)<pre><code>&lt;!-- Test--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-acceptance-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> It is recommended to create the following  <code>boot/</code> directory on your <code>test</code> directory as <code>com.[blanksystem].[blank].service/boot</code>. <pre><code> \u2514\u2500\u2500 test/\n    \u251c\u2500\u2500 java/\n    \u2502  \u2514\u2500\u2500 com.[blanksystem].[blank].service\n    \u2502     \u251c\u2500\u2500 boot/\n    \u2502     \u2502  \u2514\u2500\u2500 AcceptanceTestCase.java\n    \u2502     \u2502  \u2514\u2500\u2500 CucumberHooks.java\n    \u2502     \u2502  \u2514\u2500\u2500 TestContainersLoader.java\n</code></pre></p> <p>To get started, you need to add the following classes:</p> TestContainers LoaderCucumberHooksAcceptanceTestCaseFeaturesApplication Test Properties <p>Important the image name and use the correct version. For instance: <code>com.blanksystem/blank-service</code> with version <code>1.0.0-alpha</code>.</p> TestContainersLoader.java<pre><code>import com.lg5.spring.kafka.config.data.KafkaConfigData;\nimport com.lg5.spring.testcontainer.config.AppContainerCustomConfig;\nimport com.lg5.spring.testcontainer.config.ContainerConfig;\nimport com.lg5.spring.testcontainer.config.KafkaContainerCustomConfig;\nimport com.lg5.spring.testcontainer.config.PostgresContainerCustomConfig;\nimport com.lg5.spring.testcontainer.config.WiremockContainerCustomConfig;\nimport com.lg5.spring.testcontainer.container.AppCustomContainer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.containers.KafkaContainer;\nimport org.testcontainers.containers.PostgreSQLContainer;\nimport org.wiremock.integrations.testcontainers.WireMockContainer;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\n@Import({\nPostgresContainerCustomConfig.class,\nKafkaContainerCustomConfig.class,\nWiremockContainerCustomConfig.class,\nAppContainerCustomConfig.class\n})\npublic final class TestContainersLoader {\n\n    private final KafkaConfigData kafkaConfigData;\n\n    private final List&lt;ContainerConfig&gt; containerConfigs;\n\n    public TestContainersLoader(KafkaConfigData kafkaConfigData, List&lt;ContainerConfig&gt; containerConfigs) {\n        this.kafkaConfigData = kafkaConfigData;\n        this.containerConfigs = containerConfigs;\n    }\n\n    @Bean\n    public AppCustomContainer apiContainer(AppCustomContainer appCustomContainer,\n                                           PostgreSQLContainer&lt;?&gt; postgresContainer,\n                                           KafkaContainer kafkaContainer,\n                                           WireMockContainer wireMockContainer,\n                                           GenericContainer&lt;?&gt; schemaRegistryContainer) {\n\n        appWithEnvBuilder(appCustomContainer.getEnvMap(), postgresContainer, kafkaContainer,\n                wireMockContainer, schemaRegistryContainer);\n\n        appCustomContainer.start();\n        appCustomContainer.initRequestSpecification();\n        updateKafkaConfigData(kafkaContainer);\n\n        return appCustomContainer;\n    }\n\n    private void updateKafkaConfigData(KafkaContainer kafkaContainer) {\n        kafkaConfigData.setBootstrapServers(kafkaContainer.getBootstrapServers());\n    }\n\n    private void appWithEnvBuilder(Map&lt;String, String&gt; envMap, PostgreSQLContainer&lt;?&gt; postgreSQLContainer,\n                                   KafkaContainer kafkaContainer,\n                                   WireMockContainer wireMockContainer,\n                                   GenericContainer&lt;?&gt; schemaRegistryContainer) {\n\n        final Map&lt;Class&lt;?&gt;, Consumer&lt;Map&lt;String, String&gt;&gt;&gt; configActions = new HashMap&lt;&gt;();\n\n\n        addPostgresConfig(postgreSQLContainer, configActions);\n\n\n        addWiremockConfig(wireMockContainer, configActions);\n\n        addKafkaConfig(kafkaContainer, schemaRegistryContainer, configActions);\n\n        configActions.forEach((configClass, action) -&gt; action.accept(envMap));\n\n\n    }\n\n    private void addKafkaConfig(KafkaContainer kafkaContainer, GenericContainer&lt;?&gt; schemaRegistryContainer, Map&lt;Class&lt;?&gt;, Consumer&lt;Map&lt;String, String&gt;&gt;&gt; configActions) {\n        configActions.put(KafkaContainerCustomConfig.class,\n                map -&gt; containerConfigs.stream()\n                        .filter(KafkaContainerCustomConfig.class::isInstance)\n                        .findFirst()\n                        .ifPresent(config -&gt; map.putAll(((KafkaContainerCustomConfig) config)\n                                .initializeEnvVariables(kafkaContainer, schemaRegistryContainer))));\n    }\n\n    private void addWiremockConfig(WireMockContainer wireMockContainer, Map&lt;Class&lt;?&gt;, Consumer&lt;Map&lt;String, String&gt;&gt;&gt; configActions) {\n        configActions.put(WiremockContainerCustomConfig.class,\n                map -&gt; containerConfigs.stream()\n                        .filter(WiremockContainerCustomConfig.class::isInstance)\n                        .findFirst()\n                        .ifPresent(config -&gt; map.putAll(config.initializeEnvVariables(wireMockContainer))));\n    }\n\n    private void addPostgresConfig(PostgreSQLContainer&lt;?&gt; postgreSQLContainer, Map&lt;Class&lt;?&gt;, Consumer&lt;Map&lt;String, String&gt;&gt;&gt; configActions) {\n        configActions.put(PostgresContainerCustomConfig.class,\n                map -&gt; containerConfigs.stream()\n                        .filter(PostgresContainerCustomConfig.class::isInstance)\n                        .findFirst()\n                        .ifPresent(config -&gt; map.putAll(config.initializeEnvVariables(postgreSQLContainer))));\n    }\n</code></pre> <p>This module does not expose any ports, so you must extend the <code>Lg5TestBootPortNone</code> class.</p> CucumberHooks.java<pre><code>import com.lg5.spring.integration.test.boot.Lg5TestBootPortNone;\nimport io.cucumber.spring.CucumberContextConfiguration;\nimport org.springframework.context.annotation.Import;\n\n@Import(TestContainersLoader.class)\n@CucumberContextConfiguration\npublic final class CucumberHooks extends Lg5TestBootPortNone {\n\n}\n</code></pre> <ol> <li>Define the feature file in <code>src/test/resources/features/*.feature</code></li> <li>You can find cucumber repor in <code>target/atdd-reports/cucumber-reports.html</code>  all in one click on this class, and you are ready to use the application.</li> </ol> AcceptanceTestCase.java<pre><code>import io.cucumber.junit.platform.engine.Constants;\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.suite.api.ConfigurationParameter;\nimport org.junit.platform.suite.api.ConfigurationParameters;\nimport org.junit.platform.suite.api.IncludeEngines;\nimport org.junit.platform.suite.api.SelectClasspathResource;\nimport org.junit.platform.suite.api.Suite;\n\nimport java.io.File;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@Suite\n@IncludeEngines(\"cucumber\")\n@SelectClasspathResource(\"features\")\n@ConfigurationParameters({\n@ConfigurationParameter(key = Constants.PLUGIN_PROPERTY_NAME, value = \"pretty, json:target/atdd-reports/cucumber.json, \" +\n\"html:target/atdd-reports/cucumber-reports.html\"),\n@ConfigurationParameter(key = Constants.GLUE_PROPERTY_NAME, value = \"com.blanksystem.blank.service\")\n})\nclass AcceptanceTestCase {\n\n    @Test\n    void test() {\n        File feature = new File(\"src/test/resources/features\");\n        assertTrue(feature.exists());\n    }\n}\n</code></pre> <ol> <li>Create a directory called<code>src/test/resources/features</code></li> <li>Create the feature file in <code>example.feature</code></li> <li>Create new step definition file</li> </ol> example.feature<pre><code>Feature:\n    I as a customer want to create a blank using the repository template\n\nScenario: the blank should be CREATED when use the repository template\n    Given a repository template\n    When blank is created\n    Then the blank will be created using the repository template\n</code></pre> MyStepdefs.java<pre><code>import io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\npublic class MyStepdefs {\n    @Given(\"a repository template\")\n    public void aRepositoryTemplate() {\n    }\n\n    @When(\"blank is created\")\n    public void blankIsCreated() {\n    }\n\n    @Then(\"the blank will be created using the repository template\")\n    public void theBlankWillBeCreatedUsingTheRepositoryTemplate() {\n    }\n}\n</code></pre> <p>With <code>destination.path: ./target/logs</code> where stored logs file from blank-service after that tests finished.    Replace some name by your system and domain name: <code>blanksystem</code> and <code>blank</code>.</p> <p>`application.image.name: your-docker.images:version</p> <p>\u26a0\ufe0f Please attention to highlighted lines!!!        \u26a0\ufe0f Disabled liquibase migrations, only test(NOT PRODUCTION).</p> application-test.yml<pre><code>application:\n  server:\n    port: 8080\n  image:\n    name: com.blanksystem/blank-service:1.0.0-alpha\n  traces:\n    console:\n      enabled: false\n    file:\n      enabled: true\n  log:\n    source:\n      path: /logs\n    destination:\n      path: ./target/logs\n\nblanksystem:\n  blank:\n    events:\n      journal:\n        blank:\n          topic: blank.1.0.event.created\n          consumer:\n            group: blank-topic-consumer-acceptance-test\nspring:\n  datasource:\n    url: jdbc\n  liquibase:\n    enabled: false\n\nlogging:\n  level:\n    com.blanksystem: INFO\n    io.confluent.kafka: ERROR\n    org.apache: ERROR\n\nthird:\n  basic:\n    auth:\n      username: admin\n      password: pass\n  jsonplaceholder:\n    url: https://jsonplaceholder.typicode.com\n    basic:\n      auth:\n        username: admin\n        password: pass\n\nwiremock:\n  config:\n    folder: \"wiremock/third_system/template.json\"\n    url: \"third.jsonplaceholder.url\"\n    port: 7070\n</code></pre> <p>When do you like to use some TestContainer</p> <p>if you use some TestContainer CustomConfig enabled, you would added the following properties for each one: </p> <pre><code>* Postgres Container\n    * Add liquibase files with migrations. \n* Kafka Container       \n    * `${kafka-config.bootstrap-servers}`       \n* SchemaRegistry Container      \n    * `${kafka-config.schema-registry-url}`\n* KAFKA MODELS\n    * If you must have kafka models, So, CREATE AVRO DIRECTORY  For instance: `src/test/resources/avro/example.avsc`\n* Wiremock Container        \n    * Specify third system url `${wiremock.config.url}`.        \n    * Indicate a port binding to connect: `${wiremock.config.port}`.       \n    * Directory where stored the mock req/res http `${wiremock.config.folder}`.\n    * CREATE WIREMOCK DIRECTORY and a TEMPLATE base, For instance: `src/test/resources/wiremock/third_system/template.json`.\n</code></pre>"},{"location":"atdd-module/#needs-the-spring-context","title":"Needs the Spring Context","text":"<p>Add a classic application main with Spring Boot:</p> <p>Stay alert with the <code>scanBasePackages</code> for your tests, in this case principal package the current system and extras as kafka. </p> Application.java<pre><code>package com.blanksystem.blank.service;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication(scanBasePackages = {\"com.blanksystem\", \"com.lg5.spring.kafka\"})\npublic class Application {\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>"},{"location":"atdd-module/#more-dependencies","title":"More dependencies","text":"<p>If you must have Kafka(avro plugin), database, etc. Please include more dependencies. <pre><code>&lt;dependencies&gt;\n    ...\n    &lt;!-- if you need to connect a database--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need to generate models--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-kafka-model&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need to produce events--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-kafka-producer&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need to consume events--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-kafka-consumer&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n...\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;!-- if you need to generate models--&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;\n            &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre></p> <p>Read more at Lg5Spring Wiki.</p>"},{"location":"atdd-module/#project-structure","title":"Project structure","text":"<pre><code>./\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502  \u251c\u2500\u2500 main/\n\u2502  \u2502  \u251c\u2500\u2500 java/\n\u2502  \u2502  \u2502  \u2514\u2500\u2500 com.blanksystem.blank.service\n\u2502  \u2502  \u2502     \u2514\u2500\u2500 Application.java\n\u2502  \u2502  \u2514\u2500\u2500 resources/\n\u2502  \u2502     \u2514\u2500\u2500 application.yml\n\u2502  \u2514\u2500\u2500 test/\n\u2502     \u251c\u2500\u2500 java/\n\u2502     \u2502  \u2514\u2500\u2500 com.blanksystem.blank.service\n\u2502     \u2502     \u2514\u2500\u2500 boot/\n\u2502     \u2502        \u251c\u2500\u2500 AcceptanceTestCase.java\n\u2502     \u2502        \u251c\u2500\u2500 CucumberHooks.java\n\u2502     \u2502        \u2514\u2500\u2500 TestContainersLoader.java\n\u2502     \u2514\u2500\u2500 resources/\n|        \u2514\u2500\u2500 application-test.yml\n\u2502        \u251c\u2500\u2500 features/\n\u2502        \u2502  \u2514\u2500\u2500 blank-service.feature\n\u2502        \u2514\u2500\u2500 wiremock/\n\u2502           \u2514\u2500\u2500 placeholder/\n\u2502        \n\u2514\u2500\u2500 target(autogenerate)/\n   \u2514\u2500\u2500 atdd-reports/\n      \u251c\u2500\u2500 cucumber-reports.html\n      \u2514\u2500\u2500 cucumber.json\n</code></pre> <p>Danger</p> <p>You do not need to create the <code>target/</code> directory, it is automatically generated by the <code>maven clean install</code> build command</p>"},{"location":"atdd-module/#2do","title":"2'DO","text":"<ul> <li> Add support for a dockerized application without port.</li> </ul>"},{"location":"container-module/","title":"Container Module","text":"<ul> <li>Main Application</li> <li>Create Beans(e.g.: Domain Service)</li> <li>Configurations</li> <li>Properties.</li> </ul> <p>This module has control over the service and injects different packages before building the app, Good Look! It is straightforward and has a single responsibility (S of SOLID) \ud83d\ude0e. One thing more, You need to create a dependency injection for your domain service; this modulo should be to isolate any framework with domain module(D of SOLID).</p>"},{"location":"container-module/#principal-dependencies","title":"Principal Dependencies","text":"container-module(pom.xml)<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"container-module/#your-modules-as-dependency","title":"Your modules as dependency","text":"<p>For this case, you have an app with the follows modules, for instance:  </p> <p>Modules</p> <ul> <li>blank-application-service</li> <li>blank-api</li> <li>blank-data-access</li> <li>blank-message-core</li> <li>blank-external</li> </ul> container-module(pom.xml)<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n        &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--add all modules as api, data-access..etc..--&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"container-module/#plugins-to-build-docker-image","title":"Plugins to build docker image","text":"<p>Using jib plugins prepared for build image. Only, you need to add the plugin.</p> <p>Tip</p> <p>The image name is <code>com.blanksystem/blank-service:1.0.0-alpha</code>  Given from maven parent module as <code>groupId/artifactId:version</code> Also -&gt; <code>com.[system]/[domain]-service:[current_version]</code></p> container-module(pom.xml)<pre><code>    &lt;properties&gt;\n        &lt;docker.from.image.platform.architecture&gt;arm64&lt;/docker.from.image.platform.architecture&gt;\n        &lt;docker.from.image.platform.os&gt;linux&lt;/docker.from.image.platform.os&gt;\n    &lt;/properties&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;\n                &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <p>As a final result, you'll have a docker image <code>com.blanksystem/blank-service:1.0.0-alpha</code>. By default, for Arch AMD.  Also, you can build docker image to Arch AMD using make build_to_amd, or Arch Linux ARM using <code>make build_to_arm</code>.</p> <p>----Experimental to AMD----</p>"},{"location":"container-module/#integration-test-with-lg5container","title":"Integration Test with Lg5Container","text":"<p>You need to add the following Dependency and Java classes to your integration test (IT). Recommendation(optional): Remember to create IT in this module for infrastructure components such as input and output ports. For more details, read more about Hexagonal Architecture(Spanish).</p> <p>Example a Coverage Test Report with Jacoco</p> <p>Dependencies:   </p> <p>Lg5 tries to simplify dependencies but the power is the same. \ud83d\udc4c</p> <p>container-module(pom.xml)<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-integration-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> It is recommended to create the following  <code>boot/</code> directory on your test directory. <pre><code> \u2514\u2500\u2500 test/\n    \u251c\u2500\u2500 java/\n    \u2502  \u2514\u2500\u2500 com.[blanksystem].[blank].service.container\n    \u2502     \u251c\u2500\u2500 boot/\n    \u2502     \u2502  \u2514\u2500\u2500 Bootstrap.java\n    \u2502     \u2502  \u2514\u2500\u2500 TestContainersLoader.java\n    \u2502     \u2502  \u2514\u2500\u2500 TestOrderServiceApplication.java\n</code></pre></p> TestContainers LoaderBootstrapTestApplication(Optional) TestContainersLoader.java<pre><code>import com.lg5.spring.testcontainer.config.KafkaContainerCustomConfig;\nimport com.lg5.spring.testcontainer.config.PostgresContainerCustomConfig;\nimport com.lg5.spring.testcontainer.config.WiremockContainerCustomConfig;\nimport org.springframework.context.annotation.Import;\n\n@Import({\n    PostgresContainerCustomConfig.class,\n    KafkaContainerCustomConfig.class,\n    WiremockContainerCustomConfig.class,\n})\npublic final class TestContainersLoader {\n}\n</code></pre> <p>For create a Bootstrap class has two superclasses:      \u2014 If the APP expose any port as <code>:8080</code>, so you must extend of <code>Lg5TestBoot</code> class             \u2014 Else, extend of <code>Lg5TestBootPortNone</code> class</p> Bootstrap.java<pre><code>import com.lg5.spring.testcontainer.boot.Lg5TestBoot;\nimport org.springframework.context.annotation.Import;\n\n@Import(TestContainersLoader.class)\npublic abstract class Bootstrap extends Lg5TestBoot {\n}\n</code></pre> <p>Testcontainers during the development time or run the app locally, from Spring Boot <code>3.1.0</code> this is possible. Avoid Docker configuration extras like Dockerfiles and others.   all in one click on this class, and you are ready to use the application. </p> <p>\ud83d\udea8 DO NOT USE FOR PRODUCTION OR LIVING ENVIRONMENTS.</p> TestApplication.java<pre><code>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.test.context.TestConfiguration;\nimport org.springframework.context.annotation.Import;\n\n@TestConfiguration(proxyBeanMethods = false)\n@Import(TestContainersLoader.class)\nclass TestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.from(Application::main)\n                .with(TestApplication.class)\n                .run(args);\n    }\n\n}\n</code></pre> <p>Some TestContainer CustomConfig already to use:  </p> <ul> <li>PostgresContainerCustomConfig</li> <li>KafkaContainerCustomConfig</li> <li>WiremockContainerCustomConfig</li> <li>WireMockGuiContainerCustomConfig</li> </ul> <p>Read more at Lg5Spring Wiki. </p> <p>When do you like to use some TestContainer</p> <p>if you use some TestContainer CustomConfig enabled, you would added the following properties for each one: </p> <pre><code>* Postgres Container            \n* Kafka Container       \n    * `${kafka-config.bootstrap-servers}`       \n* SchemaRegistry Container      \n    * `${kafka-config.schema-registry-url}`     \n* Wiremock Container        \n    * Specify third system url `${wiremock.config.url}`.        \n    * Indicate a port binding to connect: `${wiremock.config.port}`.       \n    * Directory where stored the mock req/res http `${wiremock.config.folder}`.\n</code></pre> <p>For instance, in Wiremock Container: application.yaml<pre><code>third:\n  jsonplaceholder:\n    url: https://jsonplaceholder.typicode.com\n    basic:\n      auth:\n        username: admin\n        password: pass\nfeign:\n  client:\n    config:\n      jsonplaceholder:\n        url: ${third.jsonplaceholder.url}\n      default:\n        loggerLevel: FULL\nwiremock:\n  config:\n    folder: \"wiremock/third_system/template.json\"\n    url: \"third.jsonplaceholder.url\"\n    port: 7070\n</code></pre></p>"},{"location":"container-module/#project-structure","title":"Project structure","text":"<pre><code> \u251c\u2500\u2500 main/\n \u2502  \u251c\u2500\u2500 java/\n \u2502  \u2502  \u2514\u2500\u2500 com.blanksystem.blank.service.container\n \u2502  \u2502     \u251c\u2500\u2500 Application.java\n \u2502  \u2502     \u2514\u2500\u2500 BeanConfiguration.java\n \u2502  \u2514\u2500\u2500 resources/\n \u2502     \u251c\u2500\u2500 config/\n \u2502     \u2502  \u251c\u2500\u2500 application-local.yaml\n \u2502     \u2502  \u251c\u2500\u2500 application.yaml\n \u2502     \u2502  \u2514\u2500\u2500 bootstrap.yml\n \u2502     \u2514\u2500\u2500 logback-spring.xml\n \u2514\u2500\u2500 test/\n    \u251c\u2500\u2500 java/\n    \u2502  \u2514\u2500\u2500 com.blanksystem.blank.service.container\n    \u2502     \u251c\u2500\u2500 boot/\n    \u2502     \u2502  \u2514\u2500\u2500 [*] Bootstrap.java\n    \u2502     \u2502  \u2514\u2500\u2500 [*] TestContainersLoader.java\n    \u2502     \u2502  \u2514\u2500\u2500 [*] TestOrderServiceApplication.java\n    \u2502     \u251c\u2500\u2500 api/\n    \u2502     \u2502  \u2514\u2500\u2500 ...\n    \u2502     \u251c\u2500\u2500 data/\n    \u2502     \u2502  \u2514\u2500\u2500 ...\n    \u2502     \u251c\u2500\u2500 external/\n    \u2502     \u2502  \u2514\u2500\u2500 ...\n    \u2502     \u251c\u2500\u2500 repository/\n    \u2502     \u2502  \u2514\u2500\u2500 ...\n    \u2502     \u2514\u2500\u2500 support/\n    \u2502        \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 resources/\n       \u251c\u2500\u2500 config/\n       \u2502  \u2514\u2500\u2500 application-test.yaml\n       \u2514\u2500\u2500 wiremock/\n          \u2514\u2500\u2500 third_system/\n             \u2514\u2500\u2500 template.json\n</code></pre> <p>[*] There are Java classes to the test directory.</p>"},{"location":"container-module/#logger-elk","title":"Logger &amp; ELK","text":"<p>This project is prepared to send log files and process visualization with filebeat. You can specify the directory for stored the *.log files. Now, genera two file logs.</p> <p>Simple log * <code>[log.path]/[application_name]-simple.log</code></p> <p>Complex log * <code>[log.path]/[application_name]-complex.log</code></p> <ul> <li>Specify the directory with <code>log.path</code> property.</li> </ul> <p>Simple: <code>Simple details about application logs.</code> Complex:  <code>More details about application logs.</code> </p>"},{"location":"container-module/#2do","title":"2'DO","text":"<ul> <li> Add more Testcontainers custom:<ul> <li>AWS Services(S3, SQS, SNS...)</li> <li>sftp</li> <li>third services</li> </ul> </li> </ul>"},{"location":"data-module/","title":"Data Access Module","text":"<p>Part I.</p> <ul> <li>Secondary Adapter to DB</li> <li>Mapper</li> <li>Explicit Repositories to DB</li> </ul> <pre><code>flowchart TB\n   subgraph adapter\n   end\n   subgraph entity\n\n   end\n   subgraph exception\n\n   end\n   subgraph mapper\n   end\n   subgraph repository\n   end\n\n   repository --&gt; adapter\n   mapper --&gt; adapter\n   entity --&gt; adapter\n   exception --&gt; adapter</code></pre>"},{"location":"data-module/#recommendations","title":"Recommendations","text":""},{"location":"data-module/#follow-these-steps","title":"Follow these steps","text":"<ol> <li>Create an entity class.</li> <li>[Optional] Create an exception class.</li> <li>Create a mapper class:<ol> <li>Method From Entity to Domain Model.</li> <li>Method From Domain Model to Entity.</li> </ol> </li> <li>Create a Jpa Repository.</li> <li>Create an adapter for jpa repository (Secondary Adapter).<ol> <li>[Optional] Implement Domain OutPort(Repository).</li> </ol> </li> </ol>"},{"location":"data-module/#dependencies","title":"Dependencies","text":"<pre><code>&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n      &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n   &lt;/dependency&gt;\n   &lt;!--lg5 dependencies--&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n      &lt;artifactId&gt;lg5-spring-data-jpa&lt;/artifactId&gt;\n   &lt;/dependency&gt;\n   &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n      &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"data-module/#migrations-with-liquibase","title":"\ud83d\udcbe Migrations with liquibase","text":"<p>Recommendation: Use the following keywords to filename, for instance:     DDL: For schema or structural changes such as creating tables, modifying columns, adding indexes, or constraints.   DML: For data operations such as inserting, updating, or deleting records.   DATA: For large data imports, migrations, or initial data loads. Patch: For small fixes or patches applied to correct data or structure issues. View: For database view creation or modifications. Proc: For creating or altering stored procedures or functions in the database.</p> <p>Example: <pre><code>ddl-v.0.0.1.yaml\ndml-v.0.0.2.yaml\nddl-v.0.0.3.yaml\n</code></pre></p>"},{"location":"data-module/#project-structure","title":"Project Structure","text":"<pre><code>src\n \u251c\u2500\u2500 java/\n \u2502  \u2514\u2500\u2500 com.blanksystem.blank.service.data\n \u2502      \u251c\u2500\u2500 adapter/\n \u2502      \u2502  \u2514\u2500\u2500 *.java\n \u2502      \u251c\u2500\u2500 entity/\n \u2502      \u2502  \u2514\u2500\u2500 *.java\n \u2502      \u251c\u2500\u2500 exception/\n \u2502      \u2502  \u2514\u2500\u2500 *.java\n \u2502      \u251c\u2500\u2500 mapper/\n \u2502      \u2502  \u2514\u2500\u2500 *.java\n \u2502      \u2514\u2500\u2500 repository/\n \u2502         \u2514\u2500\u2500 *JPARepository.java\n \u2514\u2500\u2500 resources/\n    \u2514\u2500\u2500 db/\n       \u2514\u2500\u2500 changelog/\n          \u251c\u2500\u2500 db.changelog-master.yaml\n          \u2514\u2500\u2500 ddl-v.0.0.1.yaml\n</code></pre>"},{"location":"data-module/#2do","title":"2'DO","text":"<ul> <li> Support other databases</li> </ul>"},{"location":"domain-app-module/","title":"Application Service Domain Module","text":""},{"location":"domain-app-module/#defined-primary-adapters","title":"Defined Primary Adapters","text":"<p>Allows the isolated domain to communicate with an outside. Orchestrate transaction, security, looking up proper aggregates and saving state changes of the domain to the database. It does not common any business logic.</p> <p>Domain event listeners are special kind of Application services that are triggered by domain events. Each domain event listener can have a separate domain service to handle business logic.</p> <p>Part I.</p> <ul> <li>DTOs</li> <li>Mappers</li> <li>Exceptions</li> <li>Ports<ul> <li>Input<ul> <li>Listeners</li> <li>Domain Service</li> </ul> </li> <li>Output<ul> <li>Publishers</li> <li>Repositories</li> </ul> </li> </ul> </li> </ul> <p>Part II</p> <ul> <li>Implementing input ports</li> </ul>"},{"location":"domain-app-module/#why-use-lombok","title":"Why use Lombok?","text":"<p>Lombok is a Java library that helps to reduce boilerplate code in Java classes, such as constructors, getters, and setters. While it can be useful, some developers prefer not to use it due to concerns about code readability and maintainability.</p>"},{"location":"domain-app-module/#why","title":"Why ?","text":"<p>YES: In others modules: e.g.: like in the Infrastructure module will use lombok to prevent Boilerplate Java codes.</p>"},{"location":"domain-app-module/#dependencies","title":"Dependencies","text":"blank-application-service(pom.xml)Principal\u00b5-service dependenciesExtras blank-application-service(pom.xml)<pre><code>&lt;dependencies&gt;\n    &lt;!-- \u00b5-service dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n        &lt;artifactId&gt;blank-domain-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- lg5 dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-common-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-jvm-saga&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> pom.xml<pre><code>&lt;!-- lg5 dependencies --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-common-application-service&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> pom.xml<pre><code>&lt;!-- \u00b5-service dependencies --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n    &lt;artifactId&gt;blank-domain-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-jvm-saga&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-app-module/#unit-test-to-use-case","title":"Unit Test to Use Case","text":"<p>If you need to create tests (only unit test for this module), you can add the following dependency:</p> pom.xml<pre><code>&lt;!--unit test --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-jvm-unit-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"domain-app-module/#structure-project","title":"Structure Project","text":"<pre><code>com.blanksystem.blank.service\n\u2514\u2500\u2500domain/\n   \u251c\u2500\u2500 BlankApplicationServiceImpl.java\n   \u251c\u2500\u2500 BlankCreateCommandHandler.java\n   \u251c\u2500\u2500 BlankMessageListenerImpl.java\n   \u251c\u2500\u2500 config/\n   \u2502  \u2514\u2500\u2500 BlankServiceConfigData.java\n   \u251c\u2500\u2500 dto/\n   \u2502  \u251c\u2500\u2500 create/\n   \u2502  \u2502  \u251c\u2500\u2500 CreateBlankCommand.java\n   \u2502  \u2502  \u2514\u2500\u2500 CreateBlankResponse.java\n   \u2502  \u251c\u2500\u2500 message/\n   \u2502  \u2502  \u2514\u2500\u2500 BlankModel.java\n   \u2502  \u2514\u2500\u2500 track/\n   \u251c\u2500\u2500 exception/\n   \u2502  \u2514\u2500\u2500 BlankApplicationServiceException.java\n   \u251c\u2500\u2500 mapper/\n   \u2502  \u2514\u2500\u2500 BlankDataMapper.java\n   \u251c\u2500\u2500 outbox/\n   \u2502  \u251c\u2500\u2500 model/\n   \u2502  \u2502  \u2514\u2500\u2500 ...\n   \u2502  \u2514\u2500\u2500 scheduler/\n   \u2502     \u2514\u2500\u2500 ...\n   \u251c\u2500\u2500 ports/\n   \u2502  \u251c\u2500\u2500 input/\n   \u2502  \u2502  \u251c\u2500\u2500 message/\n   \u2502  \u2502  \u2502  \u2514\u2500\u2500 listener/\n   \u2502  \u2502  \u2502     \u251c\u2500\u2500 blank/\n   \u2502  \u2502  \u2502     \u2502  \u2514\u2500\u2500 BlankMessageListener.java\n   \u2502  \u2502  \u2502     \u2514\u2500\u2500 customer/\n   \u2502  \u2502  \u2514\u2500\u2500 service/\n   \u2502  \u2502     \u2514\u2500\u2500 BlankApplicationService.java\n   \u2502  \u2514\u2500\u2500 output/\n   \u2502     \u251c\u2500\u2500 message/\n   \u2502     \u2502  \u2514\u2500\u2500 publisher/\n   \u2502     \u2502     \u251c\u2500\u2500 BlankMessagePublisher.java\n   \u2502     \u2502     \u251c\u2500\u2500 payment/\n   \u2502     \u2502     \u2514\u2500\u2500 restaurantapproval/\n   \u2502     \u2514\u2500\u2500 repository/\n   \u2502        \u251c\u2500\u2500 BlankRepository.java\n   \u2502        \u251c\u2500\u2500 OtherRepository.java\n   \u2502        \u2514\u2500\u2500 ReportRepository.java\n   \u2514\u2500\u2500 saga/\n       \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"domain-core-module/","title":"Domain Core Module","text":""},{"location":"domain-core-module/#business-logic","title":"Business Logic","text":"<p>Business logic that cannot fit in the aggregate. Used when multiple aggregates required in business logic can interact with other domain services.</p> <p>Use or need of common domain module.</p> <ul> <li>BaseEntity</li> <li>AggregateRoot</li> <li>BaseId(e.g: V.O)</li> </ul> <p>Part I.</p> <ul> <li>Aggregate Root</li> <li>Entities</li> <li>Value Object</li> </ul> <p>Part II</p> <ul> <li>Exception classes</li> <li>Domain Events</li> <li>Domain Service</li> </ul>"},{"location":"domain-core-module/#why-not-use-lombok","title":"Why not use Lombok","text":"<p>Lombok is a Java library that helps to reduce boilerplate code in Java classes, such as constructors, getters, and setters. While it can be useful, some developers prefer not to use it due to concerns about code readability and maintainability.</p>"},{"location":"domain-core-module/#why-no","title":"Why no?","text":"<p>NOT: For the core logic, is not recommended. It is a bad idea use any framework that autogenare code, becasue, you need to see code directly, maybe add any validation.</p>"},{"location":"domain-core-module/#plugins-to-auto-generate-builder-without-losing-control","title":"\ud83d\udd79\ufe0f Plugins to auto-generate builder without losing control","text":""},{"location":"domain-core-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-common-domain&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"domain-core-module/#unit-test-to-use-case","title":"Unit Test to Use Case","text":"<p>If you need to create tests (only unit test for this module), you can add the following dependency:</p> pom.xml<pre><code>&lt;!--unit test --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-jvm-unit-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"domain-core-module/#structure-project","title":"Structure Project","text":"<pre><code>com.blanksystem.blank.service\n\u2514\u2500\u2500 domain/\n    \u251c\u2500\u2500 BlankDomainService.java\n    \u251c\u2500\u2500 BlankDomainServiceImpl.java\n    \u251c\u2500\u2500 entity/\n    \u2502  \u2514\u2500\u2500 Blank.java\n    \u251c\u2500\u2500 event/\n    \u2502  \u251c\u2500\u2500 BlankCreatedEvent.java\n    \u2502  \u2514\u2500\u2500 BlankEvent.java\n    \u251c\u2500\u2500 exception/\n    \u2502  \u251c\u2500\u2500 BlankDomainException.java\n    \u2502  \u2514\u2500\u2500 BlankNotFoundException.java\n    \u2514\u2500\u2500 valueobject/\n       \u2514\u2500\u2500 BlankId.java\n</code></pre>"},{"location":"domain-service/","title":"Getting started","text":""},{"location":"domain-service/#define-principal-module-or-parent-module","title":"Define Principal Module or Parent Module","text":"<p>Using Lg5 Spring Framework <code>1.0.0-alpha</code>, JDK 21 More details</p>"},{"location":"domain-service/#dependencies-diagram","title":"Dependencies diagram","text":""},{"location":"domain-service/#parent-module","title":"Parent Module","text":"<p>pom.xml<pre><code>&lt;project&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.0.0-alpha.[check lts version]&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n    &lt;artifactId&gt;blank-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-alpha&lt;/version&gt;\n    &lt;packaging&gt;pom&lt;/packaging&gt;\n    &lt;modules&gt;\n        ...\n    &lt;/modules&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            ...\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n&lt;/project&gt;\n</code></pre> Note: Please check the latest version</p>"},{"location":"domain-service/#how-do-you-implement-a-domain-service","title":"How do you implement a domain service?","text":"<p>Starter Describe step per step to implement a blank domain service.</p> <p>\u23f3 Analyse the context and begin by Acceptance Test and Domain Core...</p>"},{"location":"domain-service/#acceptance-test-module","title":"Acceptance Test Module","text":"pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-acceptance-test&lt;/artifactId&gt;\n&lt;/dependency&gt; \n</code></pre>"},{"location":"domain-service/#domain-module","title":"Domain Module","text":"Domain Core ModuleApplication Service Domain Module <p>Domain Core Module pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-common-domain&lt;/artifactId&gt;\n&lt;/dependency&gt; \n</code></pre></p> <p>Application Service Domain Module pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-common-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-jvm-saga&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre></p>"},{"location":"domain-service/#data-access-module","title":"Data Access Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#message-module","title":"Message Module","text":"message-core-modulemessage-model-module pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;!-- if you need to produce events--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-producer&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- if you need to consume events--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-consumer&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        ...\n    &lt;/dependencies&gt;\n</code></pre> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-model&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        ...\n    &lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#external-module","title":"External Module","text":"pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-client&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        ...\n    &lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#api-module","title":"API Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-api-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#container-module","title":"Container Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-logger&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- tests --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-integration-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#project-structure","title":"Project structure","text":"<pre><code>\u2514\u2500\u2500 blank-service\n   \u251c\u2500\u2500 blank-acceptance-test\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-api\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-container\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-data-access\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-domain\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-external\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u251c\u2500\u2500 blank-message\n   \u2502  \u2514\u2500\u2500 pom.xml\n   \u2514\u2500\u2500 pom.xml\n</code></pre>"},{"location":"external-module/","title":"External Module","text":""},{"location":"external-module/#calling-external-system","title":"Calling External System","text":"<p>Rest, Soap, gRpc, GraphQL, IA strategy, etc.</p> <p>First, You must create or have an output port in the application service layer. So, You create an adapter for implement these ports.</p> <pre><code>flowchart LR\n   subgraph application service\n       output_port\n   end\n   subgraph external module\n     secondary_adapter\n   end\n    output_port --&gt; secondary_adapter</code></pre> <p>Part I.</p> <ul> <li>DTO to client specific.</li> <li>Mappers</li> </ul> <p>Part II.</p> <ul> <li>Implementing output ports(Publishers/Producers)<ul> <li>Secondary Adapter</li> </ul> </li> </ul>"},{"location":"external-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"message-module/","title":"Message Module","text":""},{"location":"message-module/#publisher","title":"Publisher","text":"<p>First, You must create or have an output port in the application service layer. So, You create an adapter for implement these ports.</p> <p>Example: a spec with AsyncAPI <pre><code>flowchart LR\n   subgraph application service\n       output_port\n   end\n   subgraph messaging module\n     secondary_adapter\n   end\n    output_port --&gt; secondary_adapter</code></pre></p> <p>Part I.</p> <ul> <li>Models from Event Specification(e.g: Avro Models)</li> <li>Mappers</li> </ul> <p>Part II.</p> <ul> <li>Implementing output ports(Publishers/Producers)<ul> <li>Secondary Adapter</li> </ul> </li> <li>Implementing input ports(Listener/Consumers)<ul> <li>Primary Adapter</li> </ul> </li> </ul>"},{"location":"message-module/#dependencies","title":"Dependencies","text":"Message ModelMessage Core <p>Important add the avro plugin and generate the avro models with <code>mvn -pl blank-message/blank-message-model clean install</code></p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-kafka-model&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>&lt;!-- Implements OUTPUT ports from application service layer --&gt;\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n    &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n    &lt;artifactId&gt;blank-message-model&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;!-- if you need to produce events--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-kafka-producer&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;!-- if you need to consume events--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-kafka-consumer&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"message-module/#plugins-to-generate-avro-models","title":"Plugins to generate avro models","text":"<p>Only for blank-message-model submodule.    * First, Add <code>avro-maven-plugin</code> for mng the avro model to java objects. * Second, Disable the <code>maven-checkstyle-plugin</code>with <code>&lt;skip&gt;true&lt;/skip&gt;</code>. <pre><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n                &lt;skip&gt;true&lt;/skip&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;\n            &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre></p>"},{"location":"message-module/#project-structure","title":"Project structure","text":"Message model structureMessage core structure <p>Important add the avro plugin and generate the avro models with <code>mvn -pl blank-message/blank-message-model clean install</code></p> <p><pre><code> src/\n \u251c\u2500\u2500 main/\n \u2502  \u251c\u2500\u2500 java/\n \u2502  \u2502  \u2514\u2500\u2500 com.blanksystem.message/\n \u2502  \u2502       \u2514\u2500\u2500 model/\n \u2502  \u2502          \u2514\u2500\u2500 avro/\n \u2502  \u2502             \u2514\u2500\u2500 BlankAvroModel.java(autogenerate)\n \u2502  \u2514\u2500\u2500 resources/\n \u2502     \u251c\u2500\u2500 avro/\n \u2502     \u2502  \u2514\u2500\u2500 blank.avsc\n \u2502     \u2514\u2500\u2500 spec/\n \u2502        \u2514\u2500\u2500 asyncapi.yaml\n</code></pre> Also, you must add the Async Api definition into <code>resourses/spec/asyncapi.yaml</code></p> <pre><code>main/\n\u2514\u2500\u2500 java/\n    \u2514\u2500\u2500 com.blanksystem.blank.service.message\n        \u251c\u2500\u2500 listener/\n        \u2502  \u2514\u2500\u2500 kafka/\n        \u2502     \u2514\u2500\u2500 BlankKafkaListener.java\n        \u251c\u2500\u2500 mapper/\n        \u2502  \u2514\u2500\u2500 BlankMessagingDataMapper.java\n        \u2514\u2500\u2500 publisher/\n           \u2514\u2500\u2500 kafka/\n               \u2514\u2500\u2500 BlankEventKafkaPublisher.java\n</code></pre> <p>Read more about openapi guidelines</p>"},{"location":"message-module/#2do","title":"2'DO","text":"<ul> <li> Support for asyncapi definition and a process to avro files automatically generation.</li> </ul>"}]}