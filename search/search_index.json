{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#blank-service-with-hex-arch-ddd-saga-outboxkafka","title":"\ud83d\udee0\ufe0f Blank \u03bc-service with Hex Arch, DDD, SAGA, Outbox&amp;Kafka","text":"<p>For full code visit Repository.</p> <p> \u26a0\ufe0f Replace blank with the Domain Name \u26a0\ufe0f </p>"},{"location":"#using-lg5-spring-100-alpha-jdk-21","title":"Using Lg5 Spring <code>1.0.0-alpha</code>, JDK 21","text":"<p>More details</p>"},{"location":"#build-project","title":"\ud83d\ude80 Build project","text":"<p>Install 1/1: Setup JDK 21.</p> <pre><code>sdk use java 21.0.2-amzn \n</code></pre> <p>Install \u00bd: Install the dependencies in your project.</p> <pre><code>mvn clean install \n</code></pre>"},{"location":"#deploy-with-k8s","title":"\ud83d\ude80 Deploy with K8s","text":"<p>Use the infra repository blank-infra to deploy with K8s</p>"},{"location":"#contents","title":"\ud83d\udcdaContents","text":"<ul> <li>blank-acceptance-test</li> <li>blank-api</li> <li>blank-container</li> <li>blank-data-access</li> <li>blank-domain<ul> <li>blank-domain-core</li> <li>blank-application-service</li> </ul> </li> <li>blank-external</li> <li>blank-message<ul> <li>blank-message-core</li> <li>blank-message-model</li> </ul> </li> </ul>"},{"location":"#run-locally","title":"\ud83d\ude80 Run locally","text":""},{"location":"#you-can","title":"You can ...","text":"<p>Using <code>makefile</code></p>"},{"location":"#start-with-infrastructure","title":"Start with infrastructure","text":"<p>\ud83d\ude00 To start the Kafka Cluster and Postgres.</p> <pre><code>make docker-up\n</code></pre> <p>\u26d4\ufe0f To the Kafka Cluster and Postgres stop or destroy: <pre><code>make docker-down\n</code></pre></p>"},{"location":"#run-app","title":"Run APP","text":"<p>\ud83d\ude00 To start the blank Service.</p> <pre><code>make run-app\n</code></pre>"},{"location":"#blank-api-100-alpha","title":"blank API <code>1.0.0-alpha</code>","text":"<p>\ud83d\udc4b  blank API, Port:8181</p> <p>Username: <code>None</code> Password: <code>None</code></p>"},{"location":"#database-ui","title":"Database UI","text":"<p>\ud83d\udc4b  PgAdmin, Port:5013</p> <p>Username: <code>blanksystem@db.com</code> Password: <code>blanksystem-db</code></p>"},{"location":"#kafka-ui","title":"Kafka UI","text":"<p>\ud83d\udc4b  Kafka UI, Port:9080</p> <p>Username: <code>None</code> Password: <code>None</code> </p>"},{"location":"#contracts","title":"Contracts","text":"<ol> <li>Open API</li> <li>Async API</li> </ol>"},{"location":"#avro-models-from-avro-model-definition","title":"AVRO MODELS from Avro Model definition","text":"<p>If you add a new Avro model, REMEMBER execute avro model again. <pre><code>make run-avro-model\n</code></pre></p>"},{"location":"#logger-elk","title":"Logger &amp; ELK","text":"<p>This project is prepared to send log files and process visualization with filebeat. You can specify the directory for stored the *.log files. Now, genera two file logs.</p> <p>Simple log * [log.path]/[application_name]-simple.log</p> <p>Complex log * [log.path]/[application_name]-complex.log</p> <ul> <li>Specify the directory with <code>log.path</code> property.</li> </ul> <p>Simple: <code>Simple details about application logs.</code> Complex:  <code>More details about application logs.</code></p>"},{"location":"#testing-project","title":"\ud83e\uddea Testing Project","text":"<p>\u2705 Checkstyle \u00bc: configuration that checks the Google coding conventions from Google Java Style.</p> <pre><code>make run-checkstyle \n</code></pre> <p>\ud83e\uddea Running Unit Test 2/4: Using JUnit 5.</p> <pre><code>make run-unit-test \n</code></pre> <p>\ud83c\udf3e Running Integration Test \u00be: Using Test Containers, JUnit 5 and Rest-Assured.</p> <pre><code>make run-integration-test \n</code></pre> <p>\ud83e\udd52Running Acceptance Test 4/4: Using Cucumber, Test Containers, JUnit 5 and Rest-Assured.</p> <pre><code>make run-acceptance-test\n</code></pre>"},{"location":"#interaction-with-tests-one-to-one","title":"Interaction with tests one-to-one","text":"<p>\ud83e\uddea Run a Unit Test <pre><code>make run-ut-spec TEST_NAME=BlankMessageListenerImplTest\n</code></pre> Details: <code>make run-ut-spec TEST_NAME=[TestNameTest]</code></p> <p>\ud83c\udf3eRun an Integration Test <pre><code>make run-it-spec TEST_NAME=OtherRepositoryIT\n</code></pre> Details: <code>make run-it-spec TEST_NAME=[TestNameTest|TestNameIT]</code></p> <p>\ud83e\udd52 Run an Acceptance Test <pre><code>make run-at-spec TEST_NAME=StartAcceptanceT\n</code></pre> Details: <code>make run-at-spec TEST_NAME=[TestNameAcceptanceT]</code></p> <p>\u26a0\ufe0f Any Test: Be careful, this option is slower. <pre><code>make run-test-spec TEST_NAME=BlankMessageListenerImplTest\n</code></pre> Details: <code>make run-test-spec TEST_NAME=[TestNameTest|TestNameIT|TestNameAcceptanceT]</code> </p>"},{"location":"#acceptance-test-report","title":"\ud83e\udd52 Acceptance Test Report","text":"<p>You can show the Acceptance Test Report Online.</p>"},{"location":"#license","title":"\u2696\ufe0f License","text":"<p>The MIT License (MIT). Please see License for more information.</p>"},{"location":"api-module/","title":"API Module","text":"<p>Implement input port from a primary adapter. For instance, Spring Rest Controller.</p>"},{"location":"api-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n        &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--lg5 dependencies--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-api-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"api-module/#project-structure","title":"Project structure","text":"<pre><code>...\n\u2514\u2500\u2500 com.blanksystem.blank.service.api\n   \u251c\u2500\u2500 exception/\n   \u2502  \u2514\u2500\u2500 handler/\n   \u2502     \u2514\u2500\u2500 BlankGlobalExceptionHandler.java\n   \u2514\u2500\u2500 rest/\n      \u2514\u2500\u2500 BlankController.java\n...\n\u2514\u2500\u2500 resources/\n    \u2514\u2500\u2500 spec/\n       \u2514\u2500\u2500 openapi.yaml\n</code></pre>"},{"location":"api-module/#2do","title":"2'DO","text":""},{"location":"api-module/#extend-support-to","title":"Extend support to:","text":"<ul> <li>GraphQL</li> <li>gRCP</li> <li>Command Line Interactive or others.</li> </ul>"},{"location":"atdd-module/","title":"Acceptance Test(ATDD) Module \u26a0\ufe0f The Documentation in Progress... \u26a0\ufe0f","text":""},{"location":"atdd-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-atdd&lt;/artifactId&gt;\n&lt;/dependency&gt; \n</code></pre>"},{"location":"container-module/","title":"Container Module","text":"<p>Part I.</p> <ul> <li>Main Application</li> <li>Create Beans(e.g: Domain Service)</li> <li>Configurations</li> <li>Properties</li> </ul>"},{"location":"container-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.blanksystem&lt;/groupId&gt;\n        &lt;artifactId&gt;blank-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--lg5 dependencies--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-api-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"container-module/#plugins-to-build-docker-image","title":"Plugins to build docker image","text":"<p>It has two plugins prepared for build image. Only, you need to add the plugin.</p> <p>Tip</p> <p>The image name is <code>com.blanksystem/blank-service:1.0.0-alpha</code>  Given from maven parent module as <code>group/artefact:version</code> Also -&gt; <code>com.[system]/[domain]-service:[current_version]</code></p> Using Jib PluginUsing spring-boot-maven-plugin pom.xml<pre><code>    &lt;properties&gt;\n        &lt;docker.from.image.platform.architecture&gt;arm64&lt;/docker.from.image.platform.architecture&gt;\n        &lt;docker.from.image.platform.os&gt;linux&lt;/docker.from.image.platform.os&gt;\n    &lt;/properties&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;\n                &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> pom.xml<pre><code>    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>"},{"location":"container-module/#project-structure","title":"Project structure","text":"<pre><code>./\n\u2514\u2500\u2500 com.blanksystem.blank.service.api\n   \u251c\u2500\u2500 exception/\n   \u2502  \u2514\u2500\u2500 handler/\n   \u2502     \u2514\u2500\u2500 BlankGlobalExceptionHandler.java\n   \u2514\u2500\u2500 rest/\n      \u2514\u2500\u2500 BlankController.java\n...\n\u2514\u2500\u2500 resources/\n    \u2514\u2500\u2500 spec/\n       \u2514\u2500\u2500 openapi.yaml\n</code></pre>"},{"location":"container-module/#integration-test-with-lg5container","title":"Integration Test with Lg5Container","text":"<p>You need to add the following Java classes to the test directory.</p> DependenciesTestContainers LoaderBootstrapTestApplication(Optional) pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-testcontainers&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> TestContainersLoader.java<pre><code>import com.lg5.spring.testcontainer.DataBaseContainerCustomConfig;\nimport com.lg5.spring.testcontainer.KafkaContainerCustomConfig;\nimport com.lg5.spring.testcontainer.WiremockContainerCustomConfig;\nimport org.springframework.context.annotation.Import;\n\n@Import({\n    DataBaseContainerCustomConfig.class,\n    KafkaContainerCustomConfig.class,\n    WiremockContainerCustomConfig.class\n})\npublic final class TestContainersLoader {\n}\n</code></pre> <p>For create a Bootstrap class has two superclasses:    \u2014 If the APP expose any port as <code>:8080</code>, so you must extend of <code>Lg5TestBoot</code> class           \u2014 Else, extend of <code>Lg5TestBootPortNone</code> class</p> Bootstrap.java<pre><code>import com.lg5.spring.testcontainer.Lg5TestBoot;\nimport org.springframework.context.annotation.Import;\n\n@Import(TestContainersLoader.class)\npublic abstract class Bootstrap extends Lg5TestBoot {\n}\n</code></pre> TestApplication.java<pre><code>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.test.context.TestConfiguration;\nimport org.springframework.context.annotation.Import;\n\n@TestConfiguration(proxyBeanMethods = false)\n@Import(TestContainersLoader.class)\nclass TestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.from(Application::main)\n                .with(TestApplication.class)\n                .run(args);\n    }\n\n}\n</code></pre> <p>The TestContainer CustomConfig already to use:  </p> <ul> <li>DataBaseContainerCustomConfig</li> <li>KafkaContainerCustomConfig</li> <li>WiremockContainerCustomConfig</li> </ul> <p>When do you like to use some TestContainer</p> <p>if you use some TestContainer CustomConfig enabled, you would added the following properties for each one: </p> <pre><code>* Postgres Container            \n* Kafka Container       \n    * `${kafka-config.bootstrap-servers}`       \n* SchemaRegistry Container      \n    * `${kafka-config.schema-registry-url}`     \n* Wiremock Container        \n    * Specify third system url `${wiremock.config.url}`.        \n    * Indicate a port binding to connect: `${wiremock.config.port}`.       \n    * Directory where stored the mock req/res http `${wiremock.config.folder}`.\n</code></pre> <p>For instance at Wiremock Container: application.yaml<pre><code>third:\n  jsonplaceholder:\n    url: https://jsonplaceholder.typicode.com\n    basic:\n      auth:\n        username: admin\n        password: pass\nfeign:\n  client:\n    config:\n      jsonplaceholder:\n        url: ${third.jsonplaceholder.url}\n      default:\n        loggerLevel: FULL\nwiremock:\n  config:\n    folder: \"wiremock/third_system/template.json\"\n    url: \"third.jsonplaceholder.url\"\n    port: 7070\n</code></pre></p>"},{"location":"container-module/#2do","title":"2'DO","text":""},{"location":"container-module/#add-more-testcontainer-custom","title":"Add more TestContainer custom","text":"<ul> <li>AWS Services(S3)</li> <li>sftp</li> <li>more third services.</li> </ul>"},{"location":"data-module/","title":"Data Access Module","text":"<p>Part I.</p> <ul> <li>Secondary Adapter to DB</li> <li>Mapper</li> <li>Explicit Repositories to DB</li> </ul> <pre><code>flowchart TB\n   subgraph adapter\n   end\n   subgraph entity\n\n   end\n   subgraph exception\n\n   end\n   subgraph mapper\n   end\n   subgraph repository\n   end\n\n   repository --&gt; adapter\n   mapper --&gt; adapter\n   entity --&gt; adapter\n   exception --&gt; adapter</code></pre>"},{"location":"data-module/#recommendations","title":"Recommendations","text":""},{"location":"data-module/#follow-these-steps","title":"Follow these steps","text":"<ol> <li>Create an entity class.</li> <li>[Optional] Create an exception class.</li> <li>Create a mapper class:<ol> <li>Method From Entity to Domain Model.</li> <li>Method From Domain Model to Entity.</li> </ol> </li> <li>Create a Jpa Repository.</li> <li>Create an adapter for jpa repository (Secondary Adapter).<ol> <li>[Optional] Implement Domain OutPort(Repository).</li> </ol> </li> </ol>"},{"location":"domain-app-module/","title":"Application Service Domain Module","text":""},{"location":"domain-app-module/#defined-primary-adapters","title":"Defined Primary Adapters","text":"<p> Allows the isolated domain to communicate with an outside. Orchestrate transaction, security, looking up proper aggregates and saving state changes of the domain to the database. Does not common any business logic.  Domain event listeners are special kind of Application services that are triggered by domain events. Each domain event listener can have a separate domain service to handle business logic. </p> <p>Part I. - DTOs - Mappers - Exceptions - Ports     - Input         - Listeners         - Domain Service     - Output         - Publishers         - Repositories</p> <p>Part II. - implementing input ports</p>"},{"location":"domain-app-module/#why-use-lombok","title":"Why use Lombok?","text":"<p>Lombok is a Java library that helps to reduce boilerplate code in Java classes, such as constructors, getters, and setters. While it can be useful, some developers prefer not to use it due to concerns about code readability and maintainability.</p>"},{"location":"domain-app-module/#why","title":"Why ?","text":"<p>YES: In others modules: e.g: like in the Infrastructure module will use lombook to prevent Bolirplates Java codes.</p>"},{"location":"domain-core-module/","title":"Domain Core Module","text":""},{"location":"domain-core-module/#business-logic","title":"Business Logic","text":"<p>  Business logic that cannot fit in the aggregate. Used when multiple aggregates required in business logic Can interact with other domain services </p> <p>Use or need of common domain module</p> <ul> <li>BaseEntity</li> <li>AggregateRoot</li> <li>BaseId(e.g: V.O)</li> </ul> <p>Part I.</p> <ul> <li>Aggregate Root</li> <li>Entities</li> <li>Value Object</li> </ul> <p>Part II</p> <ul> <li>Exception classes</li> <li>Domain Events</li> <li>Domain Service</li> </ul>"},{"location":"domain-core-module/#why-not-use-lombok","title":"Why not use Lombok","text":"<p>Lombok is a Java library that helps to reduce boilerplate code in Java classes, such as constructors, getters, and setters. While it can be useful, some developers prefer not to use it due to concerns about code readability and maintainability.</p>"},{"location":"domain-core-module/#why-no","title":"Why no?","text":"<p>NOT: For the core logic, is not recommended.It is  bad idea use any framework that autogenare code, becasue, you need to see code directly, maybe add any validation.</p>"},{"location":"domain-core-module/#plugins-to-auto-generate-builder-without-lose-the-control","title":"\ud83d\udd79\ufe0f Plugins to auto-generate builder without lose the control","text":"<p>InnerBuilder</p>"},{"location":"domain-service/","title":"Getting started","text":""},{"location":"domain-service/#how-do-you-implement-a-domain-service","title":"How do you implement a domain service?","text":"<p>Starter Describe step per step to implement a blank domain service.</p> <p>\u23f3 Analyse the context and begin by Acceptance Test and Domain Core...</p>"},{"location":"domain-service/#acceptance-test-module","title":"Acceptance Test Module","text":"pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-spring-atdd&lt;/artifactId&gt;\n&lt;/dependency&gt; \n</code></pre>"},{"location":"domain-service/#domain-core-module","title":"Domain Core Module","text":"pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n    &lt;artifactId&gt;lg5-common-domain&lt;/artifactId&gt;\n&lt;/dependency&gt; \n</code></pre>"},{"location":"domain-service/#application-service-domain-module","title":"Application Service Domain Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;lg5.common&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-common-application-service&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.jvm&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-jvm-saga&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#data-access-module","title":"Data Access Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- if you need SAGA Pattern/Outbox Pattern, else remove dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring.outbox&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-outbox&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#message-module","title":"Message Module","text":"message-core-modulemessage-model-module pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;!-- if you need to produce events--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-producer&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- if you need to consume events--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-consumer&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        ...\n    &lt;/dependencies&gt;\n</code></pre> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.lg5.spring.kafka&lt;/groupId&gt;\n            &lt;artifactId&gt;lg5-spring-kafka-model&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        ...\n    &lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#external-module","title":"External Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#api-module","title":"API Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-api-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"domain-service/#container-module","title":"Container Module","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-logger&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- tests --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-testcontainers&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"external-module/","title":"External Module","text":""},{"location":"external-module/#calling-external-system","title":"Calling External System","text":"<p>Rest, Soap, gRpc, GraphQL, IA strategy, etc.</p> <p>First, You must create or have an output port in the application service layer. So, You create an adapter for implement these ports.</p> <pre><code>flowchart LR\n   subgraph application service\n       output_port\n   end\n   subgraph external module\n     secondary_adapter\n   end\n    output_port --&gt; secondary_adapter</code></pre> <p>Part I.</p> <ul> <li>DTO to client specific.</li> <li>Mappers</li> </ul> <p>Part II.</p> <ul> <li>Implementing output ports(Publishers/Producers)<ul> <li>Secondary Adapter</li> </ul> </li> </ul>"},{"location":"external-module/#dependencies","title":"Dependencies","text":"pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lg5.spring&lt;/groupId&gt;\n        &lt;artifactId&gt;lg5-spring-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    ...\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"message-module/","title":"Message Module","text":""},{"location":"message-module/#publisher","title":"Publisher","text":"<p>First, You must create or have an output port in the application service layer. So, You create an adapter for implement these port.</p> <pre><code>flowchart LR\n   subgraph application service\n       output_port\n   end\n   subgraph messaging module\n     secondary_adapter\n   end\n    output_port --&gt; secondary_adapter</code></pre> <p>Part I.</p> <ul> <li>Models from Event Specification(e.g: Avro Models)</li> <li>Mappers</li> </ul> <p>Part II.</p> <ul> <li>Implementing output ports(Publishers/Producers)<ul> <li>Secondary Adapter</li> </ul> </li> <li>Implementing input ports(Listener/Consumers)<ul> <li>Primary Adapter   </li> </ul> </li> </ul>"}]}